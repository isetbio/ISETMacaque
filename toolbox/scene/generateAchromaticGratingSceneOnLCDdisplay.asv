function theScene = generateAchromaticGratingSceneOnLCDdisplay(stimParams, theDisplay, meanLuminanceMatchingAOStimulusLuminance)

    rgbSettings = [1 1 1];
    lcdSPD = displayGet(theDisplay, 'spd');
       
    % We upsample, so that the resulting oiImage will be of high resolution, and therefore,
    % spatial filtering by the cone aperture will also be done in high resolution
    upsampleFactor = stimParams.sceneSpatialUpsampleFactor;

    % Determine pixels num, taking into account the upsampleFactor
    sceneSampleSizeDegs = stimParams.pixelSizeDegs/upsampleFactor;
    pixelsNum = round(stimParams.fovDegs / sceneSampleSizeDegs);
    
    % Compute spatial support
    spatialSupportDegs = linspace(-0.5*stimParams.fovDegs, 0.5*stimParams.fovDegs, pixelsNum);
    spatialSupportDegs = spatialSupportDegs - mean(spatialSupportDegs);
    [X,Y] = meshgrid(spatialSupportDegs, spatialSupportDegs);
    
    % Quantize space based on stimParams.pixelSizeDegs
    quantizedX = floor(X/stimParams.pixelSizeDegs)*stimParams.pixelSizeDegs;

    % Compute spatial modulation pattern
    spatialModulationPattern = 0.5*(1 + stimParams.contrast * sin(2*pi*stimParams.spatialFrequencyCPD * quantizedX + stimParams.spatialPhaseDegs/180*pi));

    % Create an empty scene.  Put it far enough away so it
    % is basically in focus for an emmetropic eye accommodated to infinity.
    theScene = sceneCreate('empty');
    theScene = sceneSet(theScene,'wavelength',stimParams.wavelengthSupport);
    theScene = sceneSet(theScene,'distance', stimParams.viewingDistanceMeters);
    
    % The spectral profile of the 3 LCD guns driven with settings [rgb]
    gratingSpdRadianceProfile = rgbSettings(1) * lcdSPD(:,1) + rgbSettings(2) * lcdSPD(:,2) + rgbSettings(3) * lcdSPD(:,3);
    
    % Compute the stimulus spatial-spectral radiance
    stimulusRadiance = zeros(pixelsNum, pixelsNum, numel(stimParams.wavelengthSupport));
    for iWave = 1:numel(stimParams.wavelengthSupport)
        stimulusRadiance(:,:,iWave) = spatialModulationPattern * gratingSpdRadianceProfile(iWave);
    end
    
    % Set the scene radiance
    theScene = sceneSet(theScene, 'energy', stimulusRadiance, stimParams.wavelengthSupport);
    
    % Set the desired FOV
    theScene = sceneSet(theScene, 'h fov', stimParams.fovDegs);
    
     figure(1);
            image(sceneGet(theScene, 'rgbimage'))
            pause
            
    % Se the desired mean luminance
    theScene = sceneAdjustLuminance(theScene, meanLuminanceMatchingAOStimulusLuminance);
end
