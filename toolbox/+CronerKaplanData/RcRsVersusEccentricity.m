function [Rc, Rs, RcRsRatio, axesHandles, RcAlpha, RcBeta] = RcRsVersusEccentricity(showPlot, varargin)
% Return the Rc and Rs dependence on retinal eccentricity in degrees
%
% Syntax:
%   CronerKaplanData.RcRsVersusEccentricity('generateFigure', false)
%
% Description:
%   Return the Rc and Rs dependence on retinal eccentricity in degrees
%   These are the data from figure 4 of Croner & Kaplan
%
% Inputs:
%    none
%
% Outputs:
%    Rc, Rs, RcRsRatio, plotHandles
%
% Optional key/value pairs:
%    'generateFigure'   false
%    'addRcRsRatioData'  data struct
%

    p = inputParser;
    p.addParameter('generateFigure', false, @islogical);
    p.addParameter('axesHandles', [],  @(x)(isempty(x)||(isstruct(x))));
    p.addParameter('computeStatsBetweenDataSets', false, @islogical);
    p.addParameter('extraRcRsRatioData1', [], @(x)(isempty(x)||(isstruct(x))));
    p.addParameter('extraRcRsRatioData2', [], @(x)(isempty(x)||(isstruct(x))));
    p.addParameter('extraRcDegsData', [], @(x)(isempty(x)||(isstruct(x))));
    p.addParameter('extraRsDegsData', [], @(x)(isempty(x)||(isstruct(x))));
    p.addParameter('extraData1', [], @(x)(isempty(x)||(isstruct(x))));
    p.addParameter('extraData2', [], @(x)(isempty(x)||(isstruct(x))));
    p.addParameter('comboOptics', false, @islogical);
    p.parse(varargin{:});

    generateFigure = p.Results.generateFigure;
    axesHandles = p.Results.axesHandles;

    computeStatsBetweenDataSets = p.Results.computeStatsBetweenDataSets;

    comboOptics = p.Results.comboOptics;
    
    extraRcRsRatioData1 = p.Results.extraRcRsRatioData1;
    addRcRsRatioData1 = ~(isempty(extraRcRsRatioData1));
    
    extraRcRsRatioData2 = p.Results.extraRcRsRatioData2;
    addRcRsRatioData2 = ~(isempty(extraRcRsRatioData2));
    
    extraRcDegsData = p.Results.extraRcDegsData;
    addRcDegsData = ~(isempty(extraRcDegsData));
    
    extraRsDegsData = p.Results.extraRsDegsData;
    addRsDegsData = ~(isempty(extraRsDegsData));
    
    extraData1 = p.Results.extraData1;
    addExtraData1 = ~(isempty(extraData1));
    
    extraData2 = p.Results.extraData2;
    addExtraData2 = ~(isempty(extraData2));
    
    
    [d, RcAlpha, RcBeta] = RcVsEccentricity();
    Rc.eccDegs = d(:,1);
    Rc.radiusDegs = d(:,2);
    
    [d, RsAlpha, RsBeta] = RsVsEccentricity();
    Rs.eccDegs = d(:,1);
    Rs.radiusDegs = d(:,2);

    d = RcRsRatioVsEccentricity();
    RcRsRatio.eccDegs = d(:,1);
    RcRsRatio.ratio = d(:,2);
    
    if (computeStatsBetweenDataSets)
        % Run stats between C&K and Physiological optics
        nullHypothesisData = RcRsRatio.ratio(:);
        testHypothesisData = extraData1.values(:);
        [testPassedRcRsCronerVsPhysioOptics, pValRcRsCronerVsPhysioOptics] = ttest2(nullHypothesisData, testHypothesisData, ... 
                    'Vartype', 'unequal')
    
        testHypothesisData = extraData2.values(:);
        [testPassedRcRsCronerVsAOSLOOptics, pValRcRsCronerVsAOSLOOptics] = ttest2(nullHypothesisData, testHypothesisData, ... 
                    'Vartype', 'unequal')
    
        nullHypothesisData = extraData1.values(:);
        testHypothesisData = extraData2.values(:);
        [testPassedRcRsPhysioVsAOSLOOptics, pValRcRsPhysioVsAOSLOOptics] = ttest2(nullHypothesisData, testHypothesisData, ... 
                    'Vartype', 'unequal')

        fprintf('Paused to see the computed stats. Hit enter to continue.')
        pause;
    end


    
    
    if (generateFigure)
        subplotPosVectors = NicePlot.getSubPlotPosVectors(...
           'colsNum', 2, ...
           'rowsNum', 1, ...
           'heightMargin',  0.03, ...
           'widthMargin',    0.16, ...
           'leftMargin',     0.07, ...
           'rightMargin',    0.01, ...
           'bottomMargin',   0.12, ...
           'topMargin',      0.02);
   
        if (isempty(axesHandles))
            axesHandles = struct();
            axesHandles.hFig = figure();
            clf;
            set(axesHandles.hFig, 'Color', [1 1 1], 'Position', [10 10 1560 840]);

            axesHandles.ax1 = subplot('Position', subplotPosVectors(1,1).v);
            axesHandles.ax2 = subplot('Position', subplotPosVectors(1,2).v);
            ax = axesHandles.ax1;
        else
            figure(axesHandles.hFig);
            ax = axesHandles.ax2;
        end

        
        hold(ax, 'on');
        
        legends = {};
        plotHandles = [];

        centerColor = [1 0.3 0.8];
        surroundColor = [0.2 1 0.8];

        if (~comboOptics)
            
            if (showPlot(1) == 1) && (addExtraData1) && (~isempty(extraData1.eccDegs))
                p = addLineData(ax, extraData1,[0 0.9 0.8], [0 0.6 1]);
                legends{numel(legends)+1} = extraData1.legend;
                plotHandles(numel(plotHandles)+1) = p;
            end

            if (showPlot(2) == 1) && (addExtraData2) && (~isempty(extraData2.eccDegs))
                p = addScatterData(ax, extraData2, 8*8, '.', [0.3 0.3 0.3]);
                legends{numel(legends)+1} = extraData2.legend;
                plotHandles(numel(plotHandles)+1) = p;
            end

            if (showPlot(3) == 1) && (addRcDegsData) && (~isempty(extraRcDegsData.eccDegs))
                p = addScatterData(ax, extraRcDegsData, 13*13, 'o', centerColor);
                legends{numel(legends)+1} = extraRcDegsData.legend;
                plotHandles(numel(plotHandles)+1) = p;

            end

            if (showPlot(4) == 1) && (addRsDegsData) && (~isempty(extraRsDegsData.eccDegs))
                p = addScatterData(ax, extraRsDegsData, 16*16, 's', surroundColor);
                legends{numel(legends)+1} = extraRsDegsData.legend;
                plotHandles(numel(plotHandles)+1) = p;
            end


            if (showPlot(5) == 1)
                % C&K Rc and Rs
                [theLegends, thePlotHandles] = addCronerKaplanRcRsData(ax,Rc, Rs, centerColor, surroundColor);
                legends{numel(legends)+1} = theLegends{1};
                legends{numel(legends)+1} = theLegends{2};
                plotHandles(numel(plotHandles)+1) = thePlotHandles(1);
                plotHandles(numel(plotHandles)+1) = thePlotHandles(2);
            end

            % Regressions lines through C&Kdata
            % addRegressionLinesToPlot(ax, RcAlpha, RcBeta, RsAlpha, RsBeta, centerColor, surroundColor); 

            % Legends
            addLegendsToPlot(ax, plotHandles, legends);

            % Set axes limits and scaling, labels etc
            finalizePlot(ax);
            
        else
            % Combo optics

        
            % Rc / Rs ratios
            ax = subplot('Position', subplotPosVectors(1,1).v);
            axesHandles.ax2 = ax;
            scatter(ax,RcRsRatio.eccDegs, RcRsRatio.ratio, 100, ...
                'filled', 'MarkerEdgeColor', [0.2 0.2 0.2], 'MarkerFaceColor', [0.8 0.8 0.8], ...
                'MarkerFaceAlpha', 0.5, 'LineWidth', 1.0);

            if (addExtraData1)
                hold(ax, 'on');
                color = [1 0.8 0.2];
                scatter(ax, extraData1.eccDegs, extraData1.values, 13*13, ...
                'filled', 'MarkerEdgeColor', centerColor*0.5, 'MarkerFaceColor', color, ...
                'MarkerFaceAlpha', 0.5, 'LineWidth', 1.0);
            end
            
            if (addExtraData2)
                color = [1 0.5 0.2];
                hold(ax, 'on');
                scatter(ax, extraData2.eccDegs, extraData2.values, 13*13, ...
                'filled', 'MarkerEdgeColor', surroundColor*0.5, 'MarkerFaceColor', color, ...
                'MarkerFaceAlpha', 0.5, 'LineWidth', 1.0);
            end
            

            xlabel(ax,'eccentricity (degs)');
            ylabel(ax,'Rc/Rs ratio');
            if (addExtraData1)
                lgd = legend(ax, {'C&K', extraData1.legend, extraData2.legend}, 'Location', 'NorthOutside', ...
                    'FontSize', 16);
            else
                lgd = legend(ax, 'C&K', 'Location', 'NorthOutside');
            end
            
            lgd.NumColumns = 2;
            set(lgd,'Box','off');
            
            xtickangle(ax, 0)
            axis(ax, 'square');
            set(ax, 'XScale', 'log', 'YScale', 'linear');
            set(ax, 'XLim', [0.003 30], ...
                 'XTick',       [0.003   0.01   0.03   0.1   0.3    1    3    10    30   100], ...
                 'XTickLabels', {'.003', '.01', '.03', '.1', '.3', '1', '3', '10', '30', '100'});
            set(ax, 'YLim', [0 0.8], 'YTick', 0:0.1:1.0, 'FontSize', 30);
            grid(ax, 'on');  box(ax, 'off');
            
            
            
            % Histograms here
            ax = subplot('Position', subplotPosVectors(1,2).v);
            axesHandles.ax2 = ax;
            hold(ax, 'on');

            legends = {};
            plotHandles = [];
        
            edges = 0:0.1:1;
            [counts,bins] = histcounts(RcRsRatio.ratio, edges);
            maxY = max(counts);
            p = bar(ax,bins(1:end-1), counts, 1, 'FaceColor', [0.8 0.8 0.8], 'EdgeColor', [0.3 0.3 0.3]);
            legends{numel(legends)+1} = 'C&K';
            plotHandles(numel(plotHandles)+1) = p;
        
            if (addExtraData1) && (~isempty(extraData1.eccDegs))
                hold(ax, 'on');
                [counts,bins] = histcounts(extraData1.values, edges);
                maxY = max([maxY max(counts)]);
                p = bar(ax,bins(1:end-1), counts, 0.8, 'FaceColor', centerColor, 'EdgeColor', centerColor*0.5);
                legends{numel(legends)+1} = extraData1.legend;
                plotHandles(numel(plotHandles)+1) = p;
            end
        
            if (addExtraData2) && (~isempty(extraData2.eccDegs))
                hold(ax, 'on');
                [counts,bins] = histcounts(extraData2.values, edges);
                maxY = max([maxY max(counts)]);
                p = bar(ax,bins(1:end-1), counts, 0.4, 'FaceColor', surroundColor, 'EdgeColor', surroundColor*0.5);
                legends{numel(legends)+1} = extraData2.legend;
                plotHandles(numel(plotHandles)+1) = p;
            end
        
            % Median lines
            medianRcRsRatio = mean(RcRsRatio.ratio);
            medianExtraData1 = mean(extraData1.values(:));
            medianExtraData2 = mean(extraData2.values(:));
            fprintf('Mean RcRs - C&K: %f\n', medianRcRsRatio);
            fprintf('Mean RcRs - ExtraData1: %f\n', medianExtraData1);
            fprintf('Mean RcRs - ExtraData2: %f\n', medianExtraData2);

            plot(medianRcRsRatio*[1 1], [0 maxY+1], 'k-', 'LineWidth', 3);
            plot(medianExtraData1*[1 1], [0 maxY+1], 'k-', 'LineWidth', 3);
            plot(medianExtraData2*[1 1], [0 maxY+1], 'k-',  'LineWidth', 3);

            plot(medianRcRsRatio*[1 1], [0 maxY+1], 'w--', 'LineWidth', 3);
            plot(medianExtraData1*[1 1], [0 maxY+1], 'k--', 'Color', centerColor, 'LineWidth', 3);
            plot(medianExtraData2*[1 1], [0 maxY+1], 'k--', 'Color', surroundColor,'LineWidth', 3);

     

            [lgd, legendHandle] = legend(ax, legends, 'Location', 'NorthWest', 'FontSize', 16);
            lgd.NumColumns = 2;

            objhl = findobj(legendHandle, 'type', 'patch');
            set(objhl, 'Markersize', 14);

            set(lgd,'Box','off');
            xtickangle(ax, 0);
            xlabel(ax,'Rc/Rs ratio');
            ylabel(ax, 'count');
            axis(ax, 'square');
            set(ax, 'XScale', 'linear', 'YScale', 'linear');
            dx = bins(2)-bins(1);
            set(ax, 'XLim', [0-dx/2 0.8], ...
                'XTick',       0:0.1:1, ...
                'XTickLabels', {'0', '', '0.2', '', '0.4', '', '0.6', '', '0.8', '', '1'}, ...
                'FontSize', 30);
            grid(ax, 'on');  box(ax, 'off');
        
        end  % Combo optics
        
    end
end


function p = addLineData(ax, d, thickLineColor, thinLineColor)
    hold(ax, 'on');
    plot(ax, d.eccDegs, d.values, '-', 'Color', thickLineColor, 'LineWidth', 4); 
    p = plot(ax, d.eccDegs, d.values, '--', 'Color', thinLineColor, 'LineWidth', 2); 
end

function p = addScatterData(ax, d, markerSize, markerSymbol, markerColor)
      hold(ax, 'on');
      p = scatter(ax, d.eccDegs, d.values, markerSize, ...
         'filled', markerSymbol, 'MarkerEdgeColor', markerColor*0.5, 'MarkerFaceColor', markerColor, ...
         'MarkerFaceAlpha', 0.5, 'LineWidth', 1.0);
end

function [theLegends, thePlotHandles] = addCronerKaplanRcRsData(ax,Rc, Rs, centerColor, surroundColor)
    p = scatter(ax,Rc.eccDegs, Rc.radiusDegs, 13*13, ...
                'filled', 'MarkerEdgeColor', [0.3 0.3 0.3], 'MarkerFaceColor', centerColor*0.5+[0.5 0.5 0.5], ...
                'MarkerFaceAlpha', 0.5, 'LineWidth', 1.0);
    theLegends{1} = 'Rc (C&K)';
    thePlotHandles(1) = p;

    p = scatter(ax,Rs.eccDegs, Rs.radiusDegs, 16*16, ...
                'filled', 's', 'MarkerEdgeColor', [0.2 0.2 0.2], 'MarkerFaceColor', surroundColor*0.5+[0.5 0.5 0.5], ...
                'MarkerFaceAlpha', 0.5, 'LineWidth', 1.0);
    theLegends{2} = 'Rs (C&K)';
    thePlotHandles(2) = p;

end

function addRegressionLinesToPlot(ax, RcAlpha, RcBeta, RsAlpha, RsBeta, centerColor, surroundColor)
    % Add regression lines from C&K paper: 0.2 to 40 degs
    breakoutEccPoint = 0.15;
    eccDegsSupport = logspace(log10(breakoutEccPoint), log10(40), 100);
    CK_regressionLineForRc = RcAlpha*eccDegsSupport.^RcBeta;
    CK_regressionLineForRs = RsAlpha*eccDegsSupport.^RsBeta;

    % Straight lines below breakoutEccPoint degs
    eccDegsSupport = [0.003 breakoutEccPoint eccDegsSupport];
    CK_regressionLineForRc = [CK_regressionLineForRc(1) CK_regressionLineForRc(1)  CK_regressionLineForRc];
    CK_regressionLineForRs = [CK_regressionLineForRs(1) CK_regressionLineForRs(1) CK_regressionLineForRs];

    plot(ax,eccDegsSupport, CK_regressionLineForRc, '-', 'Color', centerColor*0.2, 'LineWidth', 4.0);
    plot(ax,eccDegsSupport, CK_regressionLineForRc, '--', 'Color', centerColor, 'LineWidth', 2.0);
    plot(ax,eccDegsSupport, CK_regressionLineForRs, '-', 'Color', surroundColor*0.2, 'LineWidth', 4.0);
    plot(ax, eccDegsSupport, CK_regressionLineForRs, '--', 'Color', surroundColor, 'LineWidth', 2.0);
end

function addLegendsToPlot(ax, plotHandles, legends)
    [lgd, legendHandle] = legend(ax,plotHandles, legends, 'Location', 'NorthWest', ...
        'FontSize', 16);
    set(lgd,'Box','off');
    if (numel(legends)<4)
        lgd.NumColumns = 1;
    elseif (numel(legends)<8)
        lgd.NumColumns = 2;
    elseif (numel(legends)<12)
        lgd.NumColumns = 3;
    else
        lgd.NumColumns = 4;
    end
    objhl = findobj(legendHandle, 'type', 'patch');
    set(objhl, 'Markersize', 14);
end


function finalizePlot(ax)
    xlabel(ax,'eccentricity (degs)');
    ylabel(ax,'characteristic radius (degs)');
    axis(ax, 'square');
    set(ax, 'XScale', 'log', 'YScale', 'log');
    xtickangle(ax,0);
    set(ax, 'XLim', [0.006 30], ...
        'XTick',       [0.003   0.01   0.03   0.1   0.3    1    3    10    30   100], ...
        'XTickLabels', {'.003', '.01', '.03', '.1', '.3', '1', '3', '10', '30', '100'}, ...
        'YLim', [0.0025 2], ...
        'YTick', [0.003 0.01 0.03 0.1 0.3 1 3 10],  ...
        'YTickLabels', {'.003', '.01', '.03', '.1', '.3', '1', '3', '10'}, ...
        'LineWidth', 1.0, 'XColor', [0.2 0.2 0.2], 'YColor', [0.2 0.2 0.2], ...
        'FontSize', 30);
     grid(ax, 'on');  box(ax, 'off');
end

function d = RcRsRatioVsEccentricity()
    d = [...
2.443802917333E-1	1.330868761553E-1; ...
2.524109188837E-1	1.866913123845E-1; ...
7.012952847757E-1	1.829944547135E-1; ...
1.228685954018E0	2.033271719039E-1; ...
8.641231732054E-1	2.698706099815E-1; ...
1.919735266222E0	3.160813308688E-1; ...
2.369727304825E0	3.197781885397E-1; ...
4.099219783035E0	3.641404805915E-1; ...
2.136700658373E0	2.643253234750E-1; ...
3.859547100321E0	2.643253234750E-1; ...
4.230755917395E0	2.421441774492E-1; ...
2.577554397115E0	2.070240295749E-1; ...
9.898440258365E-1	1.090573012939E-1; ...
1.068073411009E0	1.312384473198E-1; ...
1.893151121172E0	1.386321626617E-1; ...
3.092206830187E0	1.423290203327E-1; ...
2.862503201866E0	1.090573012939E-1; ...
2.560108551926E0	9.057301293900E-2; ...
2.780673880385E0	6.284658040665E-2; ...
2.555400942906E0	5.914972273567E-2; ...
2.024687255533E0	1.663585951941E-2; ...
3.671796575907E0	1.109057301294E-2; ...
5.172139262152E0	2.587800369686E-2; ...
5.623238973464E0	3.696857670980E-2; ...
4.210540890430E0	1.072088724584E-1; ...
4.659148338145E0	1.016635859519E-1; ...
4.290154866491E0	1.386321626617E-1; ...
3.769687151689E0	1.645101663586E-1; ...
4.371430351617E0	1.811460258780E-1; ...
5.271691346999E0	1.903881700555E-1; ...
6.473239319612E0	2.107208872458E-1; ...
6.929046639944E0	2.532347504621E-1; ...
6.466593283350E0	1.663585951941E-1; ...
7.137150650412E0	1.423290203327E-1; ...
6.234674309608E0	1.182994454713E-1; ...
6.007739863064E0	1.035120147874E-1; ...
6.380887107382E0	9.426987060998E-2; ...
7.505313367533E0	9.981515711645E-2; ...
7.121366314288E0	3.696857670980E-2; ...
7.342485479103E0	1.293900184843E-2; ...
8.623370509599E0	6.284658040665E-2; ...
9.592999508470E0	3.512014787431E-2; ...
9.974454298116E0	8.133086876155E-2; ...
9.458694192334E0	1.386321626617E-1; ...
8.578371305738E0	2.624768946396E-1; ...
9.321619694421E0	2.236598890943E-1; ...
9.695597693272E0	2.199630314233E-1; ...
1.021108088088E1	1.608133086876E-1; ...
1.088274592065E1	1.441774491682E-1; ...
1.124647794693E1	7.208872458410E-2; ...
1.289829487632E1	9.796672828096E-2; ...
1.356635997978E1	5.730129390018E-2; ...
1.431542365020E1	5.730129390018E-2; ...
1.551614086828E1	7.208872458410E-2; ...
1.567204580227E1	1.127541589649E-1; ...
1.597333277950E1	1.238447319778E-1; ...
1.409818133987E1	1.072088724584E-1; ...
1.372780327733E1	1.349353049908E-1; ...
1.336047131474E1	1.829944547135E-1; ...
1.225376781795E1	2.957486136784E-1; ...
1.382458618040E1	2.809611829945E-1; ...
1.481359945170E1	3.826247689464E-1; ...
1.592722590293E1	3.160813308688E-1; ...
1.583570444523E1	2.051756007394E-1; ...
1.628265038388E1	1.885397412200E-1; ...
1.695597693272E1	1.829944547135E-1; ...
1.896764903390E1	1.109057301294E-1; ...
1.836673658851E1	9.981515711645E-2; ...
2.046439178384E1	1.016635859519E-1; ...
2.105588901119E1	4.990757855823E-2; ...
2.114741046889E1	1.608133086876E-1; ...
2.190201250286E1	1.977818853974E-1; ...
2.302588492665E1	1.996303142329E-1; ...
2.317403615167E1	1.885397412200E-1; ...
2.413037307801E1	7.208872458410E-2; ...
2.457621134395E1	4.805914972274E-2; ...
2.787569143007E1	7.208872458410E-2; ...
2.826019231967E1	1.386321626617E-1; ...
3.015334344085E1	2.754158964880E-1; ...
3.185819020125E1	1.552680221811E-1; ...
3.510491737454E1	3.271719038817E-1 ...
        ];
    
end


function [d, alpha, beta] = RcVsEccentricity()
d = [...
    0.26113     0.029751; ...
    0.37223     0.032685; ...
     1.1081     0.033531; ...
     1.3325     0.036466; ...
     1.0565     0.026827; ...
     1.0613     0.020542; ...
     1.6766     0.031023; ...
    0.92487     0.051127; ...
     1.9295     0.071249; ...
     1.8823     0.058679; ...
     2.5097     0.053239; ...
     2.6306     0.043184; ...
     2.9759     0.036065; ...
     2.2979     0.033544; ...
     2.3584     0.028516; ...
     2.6451      0.02391; ...
     3.2063     0.031039; ...
     3.7716     0.032721; ...
     3.7757     0.027274; ...
     4.6826     0.026865; ...
     3.9884     0.045712; ...
     4.1511     0.055351; ...
     4.5993     0.062059; ...
     6.1335     0.056209; ...
     6.2981     0.063334; ...
     6.9716     0.071721; ...
     5.4036     0.047403; ...
     5.2988     0.036089; ...
      5.974     0.042381; ...
      6.651     0.046159; ...
     7.5597     0.043236; ...
     6.3744     0.037357; ...
     6.0389     0.031488; ...
     7.2885     0.027311; ...
     7.6233     0.034018; ...
     8.7609     0.028164; ...
     8.6894     0.047856; ...
     8.4422     0.075088; ...
     9.2946     0.071745; ...
      10.48     0.077624; ...
       11.1     0.082239; ...
     9.6959     0.065465; ...
     9.6434     0.060017; ...
     9.5345      0.05415; ...
     9.9918     0.048708; ...
     11.111     0.066736; ...
     11.306     0.033638; ...
     12.317     0.045799; ...
     12.817     0.059212; ...
     13.769     0.073049; ...
      14.78     0.084792; ...
     13.967      0.11202; ...
     14.652      0.10448; ...
     15.843      0.10324; ...
     16.104      0.13215; ...
     16.559      0.20548; ...
     35.141      0.20735; ...
     28.331      0.14778; ...
     27.883      0.14066; ...
      30.32      0.13942; ...
      32.01      0.15243; ...
     16.989     0.086072; ...
     16.206     0.073075; ...
     15.586     0.068459; ...
     14.346     0.059647; ...
     14.128     0.047913; ...
     13.677     0.045395; ...
     13.169     0.042875; ...
     15.664      0.03955; ...
     18.592     0.063882; ...
     19.037     0.075199; ...
     21.295     0.086117; ...
     21.357     0.079414; ...
     20.569     0.072701; ...
     22.077      0.10079; ...
     23.376      0.10667; ...
     22.927       0.1008; ...
     23.159     0.093259; ...
     24.294     0.091176; ...
     24.809     0.084478 ...
    ];

    % Regression model
    ecc = d(:,1);
    r = d(:,2);
    powerFunction = @(p,x)(p(1)*x.^p(2));  % Objective Function
    
    opts.RobustWgtFun = 'talwar';
    initialParams = [0.203 0.472];
    
    fittedParams = nlinfit(ecc,r,powerFunction,initialParams,opts);
    
    alpha = fittedParams(1);
    beta = fittedParams(2);
    

end

function [d, alpha, beta] = RsVsEccentricity()
    d = [ ...
    0.39868       0.2402; ...
    0.40361      0.15263; ...
    0.93473      0.10863; ...
     1.0282      0.15822; ...
    0.90499      0.18829; ...
     1.0268      0.20333; ...
     1.2475      0.20718; ...
     1.2491      0.16595; ...
     1.9227      0.10431; ...
     2.1389      0.11596; ...
     2.1764      0.16892; ...
     2.3505      0.20091; ...
     2.5398      0.21909; ...
     1.9264      0.41447; ...
     2.2977      0.35501; ...
     2.4552      0.49752; ...
     2.7578      0.56381; ...
     1.8649       4.1185; ...
     3.6192        3.769; ...
     7.1798       2.2128; ...
     5.1715       1.2657; ...
     5.4876       1.0845; ...
     4.4871      0.60238; ...
     3.0002      0.18408; ...
     4.1303      0.25531; ...
     4.1333      0.22522; ...
     3.8285      0.17699; ...
     4.1803      0.17025; ...
     3.8704      0.14452; ...
     4.6129      0.14169; ...
     3.9985     0.080226; ...
     5.1687      0.24787; ...
     5.7299      0.51091; ...
     6.2503      0.58466; ...
     6.3827      0.45056; ...
     7.1735      0.45918; ...
     5.7955       0.3825; ...
     6.1484      0.34063; ...
     5.8599      0.30343; ...
     6.5263      0.27544; ...
     7.3996      0.33395; ...
     8.5519      0.42899; ...
     9.4522      0.26731; ...
     9.0974      0.23583; ...
     7.0673       0.2042; ...
     8.5106      0.18003; ...
     11.865      0.15119; ...
     15.703      0.22438; ...
     12.919      0.23788; ...
     13.426      0.25694; ...
     14.509      0.27483; ...
     11.131      0.39302; ...
     10.081      0.52509; ...
     11.228      0.47208; ...
     8.8806      0.53551; ...
     9.7836       0.5953; ...
     9.6241       1.9504; ...
     16.499       1.1129; ...
     14.265      0.99163; ...
     13.339      0.81777; ...
     12.481      0.60649; ...
     15.465      0.60031; ...
     14.888      0.50466; ...
     16.258      0.47616; ...
       14.9       0.4409; ...
      13.26      0.41624; ...
     17.378      0.62977; ...
     17.875      0.75641; ...
     19.904      0.71365; ...
     20.133      0.52916; ...
     22.643      0.47572; ...
     29.444      0.51351; ...
     34.705       0.6408; ...
     20.803       1.5893; ...
     24.067       1.7161; ...
     27.834       1.9446; ...
     23.406       1.3355; ...
     27.933       1.0387; ...
     32.026      0.97989; ...
     5.7914      0.43362 ...
    ];

    % Regression model
    ecc = d(:,1);
    r = d(:,2);
    powerFunction = @(p,x)(p(1)*x.^p(2));  % Objective Function
    
    opts.RobustWgtFun = 'talwar';
    initialParams = [0.203 0.472];
    
    fittedParams = nlinfit(ecc,r,powerFunction,initialParams,opts);
    
    alpha = fittedParams(1);
    beta = fittedParams(2);
    
end
