function [DoGparams, theFittedSTF, sfHiRes, theFittedSTFHiRes, theFittedSTFcenter, theFittedSTFsurround] = ...
    DoGmodelToSTF(sf, theSTF, centerConeCharacteristicRadiusDegs)
% Fit the DoG model to the computed STF
%
% Syntax:
%   simulator.fit.DoGmodelToSTF(sf, theSTF,
%   centerConeCharacteristicRadiusDeg)
%
%
% Description: Fit the DoG model to the computed STF

    % DoG param initial values and limits: center gain, kc
    Kc = struct(...    
        'low', 1e-4, ...
        'high', 1e5, ...
        'initial', 1);

    % DoG param initial values and limits: Ks/Kc ratio
    KsToKc = struct(...
        'low', 1e-6, ...
        'high', 1, ...
        'initial', 0.1);

    % DoG param initial values and limits: RsToCenterConeRc ratio
    RsToCenterConeRc = struct(...
        'low', 1.5, ...
        'high', 10, ...
        'initial', 5);

    % DoG param initial values and limits: RcDegs
    RcDegs = struct(...
        'low', centerConeCharacteristicRadiusDegs, ...
        'high', centerConeCharacteristicRadiusDegs*100, ...
        'initial', centerConeCharacteristicRadiusDegs*2);
    
     %                          Kc           kS/kC            RsToCenterConeRc            RcDegs    
     DoGparams.initialValues = [Kc.initial   KsToKc.initial    RsToCenterConeRc.initial   RcDegs.initial];
     DoGparams.lowerBounds   = [Kc.low       KsToKc.low        RsToCenterConeRc.low       RcDegs.low];
     DoGparams.upperBounds   = [Kc.high      KsToKc.high       RsToCenterConeRc.high      RcDegs.high];
     DoGparams.names         = {'Kc',        'kS/kC',         'RsToCenterConeRc',         'RcDegs'};
     DoGparams.scale         = {'log',       'log',           'linear',                   'linear'};
     
     % The DoG model in the frequency domain
     DoGSTF = @(params,sf)(...
                    params(1)           * ( pi * params(4)^2             * exp(-(pi*params(4)*sf).^2) ) - ...
                    params(1)*params(2) * ( pi * (params(4)*params(3))^2 * exp(-(pi*params(4)*params(3)*sf).^2) ));
        
                
     
     % The optimization objective
     objective = @(p) sum((DoGSTF(p, sf) - theSTF).^2);

     % Ready to fit
     options = optimset(...
            'Display', 'off', ...
            'Algorithm', 'interior-point',... % 'sqp', ... % 'interior-point',...
            'GradObj', 'off', ...
            'DerivativeCheck', 'off', ...
            'MaxFunEvals', 10^5, ...
            'MaxIter', 10^3);
        
     % Multi-start
     problem = createOptimProblem('fmincon',...
          'objective', objective, ...
          'x0', DoGparams.initialValues, ...
          'lb', DoGparams.lowerBounds, ...
          'ub', DoGparams.upperBounds, ...
          'options', options...
          );
      
     ms = MultiStart(...
          'Display', 'off', ...
          'StartPointsToRun','bounds-ineqs', ...  % run only initial points that are feasible with respect to bounds and inequality constraints.
          'UseParallel', false);
      
     % Run the multi-start
     multiStartsNum = 128;
     [DoGparams.bestFitValues,errormulti] = run(ms, problem, multiStartsNum);

     theFittedSTF = DoGSTF(DoGparams.bestFitValues, sf);
     theFittedSTFcenter = DoGparams.bestFitValues(1)           * ( pi * DoGparams.bestFitValues(4)^2             * exp(-(pi*DoGparams.bestFitValues(4)*sf).^2) );
     theFittedSTFsurround = DoGparams.bestFitValues(1)*DoGparams.bestFitValues(2) * ( pi * (DoGparams.bestFitValues(4)*DoGparams.bestFitValues(3))^2 * exp(-(pi*DoGparams.bestFitValues(4)*DoGparams.bestFitValues(3)*sf).^2) );
     
     sfHiRes = logspace(log10(1), log10(100), 64);
     theFittedSTFHiRes = DoGSTF(DoGparams.bestFitValues, sfHiRes);
end

