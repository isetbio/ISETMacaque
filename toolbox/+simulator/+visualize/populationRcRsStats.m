function populationRcRsStats(dataOut)

    % Collect the stats across all cells
    RGCsNum = numel(dataOut);
    
    
    RsToCenterConeRcPhysiologicalOpticsAllCells = zeros(1, RGCsNum);
    RcDegsPhysiologicalOpticsAllCells = zeros(1, RGCsNum);
    RsToCenterConeRcAOSLOOpticsAllCells = zeros(1, RGCsNum);
    RcDegsRetinalSingleConeRFcenterAllCells = zeros(1, RGCsNum);
    eccDegsAllCells = zeros(1, RGCsNum);
    
    for iRGCindex = 1:RGCsNum
        d = dataOut{iRGCindex};

        for iParam = 1:numel(d.physiologicalOpticsDoGParams.names)
            if (strcmp(d.physiologicalOpticsDoGParams.names{iParam}, 'RsToRc'))
                RsToCenterConeRcPhysiologicalOpticsAllCells(iRGCindex) = d.physiologicalOpticsDoGParams.bestFitValues(iParam);
            end
            
            if (strcmp(d.physiologicalOpticsDoGParams.names{iParam}, 'RcDegs'))
                RcDegsPhysiologicalOpticsAllCells(iRGCindex) = d.physiologicalOpticsDoGParams.bestFitValues(iParam);
            end
        end
        
        for iParam = 1:numel(d.AOSLOOpticsDoGparams.names)
            if (strcmp(d.AOSLOOpticsDoGparams.names{iParam}, 'RsToCenterConeRc'))
                RsToCenterConeRcAOSLOOpticsAllCells(iRGCindex) = d.AOSLOOpticsDoGparams.bestFitValues(iParam);
            end
            
            RcDegsRetinalSingleConeRFcenterAllCells(iRGCindex) = d.centerConeCharacteristicRadiusDegs;
            eccDegsAllCells(iRGCindex) = d.centerConeEccDegs;
        end
    end
    
    % Load the cone mosaic
    iRGCindex = 1;
    load(dataOut{iRGCindex}.coneMosaicResponsesFileName, 'theConeMosaic');
    
    %  Retrieve the Rc of all cones in the model mosaic
    allMosaicConesEcc = sqrt(sum(theConeMosaic.coneRFpositionsDegs.^2,2));
    allMosaicConesRc = theConeMosaic.coneRFspacingsDegs * 0.204 * sqrt(2.0);
    idx = find(allMosaicConesEcc< 0.6);
    allMosaicConesEcc = allMosaicConesEcc(idx);
    allMosaicConesRc = allMosaicConesRc(idx);
    
    % The retrieve the Rc based on the Curcio cone density data
    obj = WatsonRGCModel();
    CurcioModelConesEcc = logspace(log10(0.003), log10(40), 100);
    coneSpacingDegs = obj.coneRFSpacingAndDensityAlongMeridian(CurcioModelConesEcc, ...
        'temporal meridian', 'deg', 'deg^2');
    CurcioModelConesRc  = coneSpacingDegs * 0.204 * sqrt(2.0);
    
   
    % AOSLO-optics figure
    % Gradual building up
    plotsToShow = [...
        1 0 0 0 0 0; ...  % Curcio
        1 1 0 0 0 0; ...  % Mosaic Rc
        1 1 1 0 0 0; ...  % Rc
        1 1 1 1 0 0; ...  % Rs
        1 1 1 1 1 0; ...  % C&K Rc
        1 1 1 1 1 1 ...   % C&K Rs
        ];
    
    plotsToShow = [...
        1 0 0 0 0 0; ...  % Curcio
        1 0 1 0 0 0; ...  % Rc
        1 0 1 0 1 0; ...  % C&K Rc
        1 0 1 1 1 0; ...   % Rs
        1 0 1 1 1 1 ... % C&K Rs
        ];

    % One-shot bulding up
    %plotsToShow = [1 1 1 1 1 1];

    for gradualFigureBuildUpStep = 1:size(plotsToShow,1)
    
        % AOSLO optics case
        [~,~,~, axesHandles] = CronerKaplanData.RcRsVersusEccentricity(...
            squeeze(plotsToShow(gradualFigureBuildUpStep,:)), ...
            'generateFigure', true, ...
            'comboOptics', false, ...
            'extraRcDegsData', struct(...
                'eccDegs', eccDegsAllCells, ...
                'values', RcDegsRetinalSingleConeRFcenterAllCells, ...
                'legend', 'Rc (M3 - AOSLO optics)'), ...
             'extraRsDegsData', struct(...
                'eccDegs', eccDegsAllCells, ...
                'values', RcDegsRetinalSingleConeRFcenterAllCells .* RsToCenterConeRcAOSLOOpticsAllCells, ...
                'legend', 'Rs (M3 - AOSLO optics)'), ...
             'extraData2', struct(...
                'eccDegs', allMosaicConesEcc, ...
                'values', allMosaicConesRc, ...
                'legend', 'model mosaic cone Rc'), ...
              'extraData1', struct(...
                'eccDegs', CurcioModelConesEcc, ...
                'values', CurcioModelConesRc, ...
                'legend', 'Curcio (temporal meridian)') ...
            );
    
%         pdfFileName = simulator.filename.populationRcRsPlots(dataOut{1}.coneMosaicResponsesFileName, sprintf('AOSLOoptics_BuildingUpStep%d',gradualFigureBuildUpStep));
%         NicePlot.exportFigToPDF(pdfFileName, axesHandles.hFig, 300);

        % Physiological-optics case
        [~,~,~, axesHandles] = CronerKaplanData.RcRsVersusEccentricity(...
            squeeze(plotsToShow(gradualFigureBuildUpStep,:)), ...
            'generateFigure', true, ...
            'axesHandles', axesHandles, ...
            'comboOptics', false, ...
            'extraRcDegsData', struct(...
                'eccDegs', eccDegsAllCells, ...
                'values', RcDegsPhysiologicalOpticsAllCells, ...
                'legend', 'Rc (M3 - physiological optics)'), ...
             'extraRsDegsData', struct(...
                'eccDegs', eccDegsAllCells, ...
                'values', RcDegsPhysiologicalOpticsAllCells .* RsToCenterConeRcPhysiologicalOpticsAllCells, ...
                'legend', 'Rs (M3 - physiological optics)'), ...
             'extraData2', struct(...
                'eccDegs', allMosaicConesEcc, ...
                'values', allMosaicConesRc, ...
                'legend', 'model mosaic cone Rc'), ...
              'extraData1', struct(...
                'eccDegs', CurcioModelConesEcc, ...
                'values', CurcioModelConesRc, ...
                'legend', 'Curcio (temporal meridian)') ...
            );
        pdfFileName = simulator.filename.populationRcRsPlots(dataOut{1}.coneMosaicResponsesFileName, sprintf('BuildUpStep%d', gradualFigureBuildUpStep));
        NicePlot.exportFigToPDF(pdfFileName, axesHandles.hFig, 300);
    end

    

    
    % Physiological vs AOSLO optics Rc/Rs ratio
    [~,~,~, axesHandles] = CronerKaplanData.RcRsVersusEccentricity(...
        plotsToShow, ...
        'generateFigure', true, ...
        'comboOptics', true, ...
        'extraData1', struct(...
            'eccDegs', eccDegsAllCells, ...
            'values', 1./RsToCenterConeRcPhysiologicalOpticsAllCells, ...
            'legend', 'M3 - physiological optics'), ...
        'extraData2', struct(...
            'eccDegs', eccDegsAllCells, ...
            'values', 1./RsToCenterConeRcAOSLOOpticsAllCells, ...
            'legend', 'M3 - AOSLO optics') ...
    );
    
    pdfFileName = simulator.filename.populationRcRsPlots(dataOut{1}.coneMosaicResponsesFileName, 'AOSLO_vs_PhysiologicalOptics');
    NicePlot.exportFigToPDF(pdfFileName, axesHandles.hFig, 300);
end

